1) Для хранения основных сущностей использовать реляционную БД, например, таблица пользователей:
    long: id
    date: registration date
    string: name

2) Для хранения событий, которые можно отменить использовать систему событий, то есть результат выполнения каждой команды
записывать как отдельный record в колоночную СУБД примерно в таком формате:
date (время) :: initiator (имя сервиса) :: type_of_event (тип события)::
is_rolled_back (был ли отменен) :: info_json (параметры исполненной команды)

Колоночная СУБД пригодится нам, чтобы удобно партицировать и группировать данные по дням, месяцам, регионам, событиям.
Такое разбиение вместе с использованием систем для распределенного хранения и обработки (например, кластер Apache Hadoop)
поможет удобно распределить данные по серверам и дискам, обеспечит репликацию и быстрое параллельное считывание. Естественно, такая система
хранения не позволит редактировать имеющиеся данные, но нам это и не нужно, так как мы будем хранить только отменяемые события,
для отмены которых достаточно добавить такое же событие, но с пометкой is_rolled_back.

3) Для чтения использовать БД из пункта 2 и реляционную БД, где в каждой таблице будет какой-то агрегат, представляющий выбранный по определенным параметрам
слепок состояния БД из пункта 2, полученный и обновляемый с помощью специальных сервисов.
Например, для просмотра комментариев под постом удобно иметь такие таблицы:
    Посты:             Комментарии:
    long: post-id       long: comment-id
    long: user-id       long: user-id
    long: comment-id    string: text-of-comment
А для просмотра ленты уже удобно читать из колоночной БД, имея таблицу с подписками и фильтруя по ней все записи из колоночной БД.
Фильтры: по type_of_event (public-post), is_rolled_back (был ли отменен) и info_json(проверить по subscribe-user-id опубликовал ли это пост тот, на кого подписан пользователь)
и выводить это в обратном хронологическом порядке по date, начиная с той date, которая придет в запросе:
    Подписки:
    long: user-id
    long: subscribe-user-id